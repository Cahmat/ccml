
<div>
    <div class="input-group flex-nowrap my-1">
        <div class="input-group-prepend flex-grow-1">
            <div class="btn btn-secondary @Theme.ButtonSizeClass border border-right-0 flex-grow-1 d-flex" @onclick="SelectTask">
                <div class="m-1">@Task.Name</div>
                <div class="m-1 ml-auto">@(Task.TimeList.Count > 0 ? ToHighestValueString(Task.ElapsedTime) + " ago" : "Never")</div>
                @if (true)
                {
                    @if (Task.ElapsedToDesiredRatio >= 100)
                    {
                        <div class="m-1 font-weight-bold text-danger">( @Task.ElapsedToDesiredRatio.ToString("N0") % )</div>
                    }
                    else if (Task.ElapsedToDesiredRatio >= 80)
                    {
                        <div class="m-1 font-weight-bold text-warning">( @Task.ElapsedToDesiredRatio.ToString("N0") % )</div>
                    }
                    else if (Task.TimeList.Count > 1)
                    {
                        <div class="m-1 font-weight-bold text-info">( @Task.ElapsedToDesiredRatio.ToString("N0") % )</div>
                    }
                    else
                    {
                        <div class="m-1"><span class="fa fa-fw fa-exclamation"></span></div>
                    }
                }
            </div>
        </div>
        <div class="input-group-append">
            <Button Color="Color.Primary" Outline="true" Size="@Theme.Size" @onclick="OnDone"><span class="fa fa-fw fa-check"></span></Button>
        </div>
    </div>

    @if (Task == SelectedTask)
    {
        <p>
            @( "Average interval: " + ToReadableString(Task.AverageTime) )

            @if (Task.IsElapsedOverAverage)
            {
                <div class="font-weight-bold">@( $"Average interval is overdue by: {ToReadableString(Task.ElapsedTime - Task.AverageTime)} ( {(Task.ElapsedToAverageRatio - 100).ToString("N0")} % )" )</div>
            }
        </p>

        <p>
            @( "Desired interval:" )

            <div class="input-group flex-nowrap my-1">
                <NumericEdit ShowStepButtons="false" Size="@Theme.Size" TValue="int?" Min="0" Max="9000" Value="Task.DesiredTime.Days" ValueChanged="SetDesiredIntervalDays" />
                <TextEdit Size="@Theme.Size" ReadOnly="true" Text="@(Task.DesiredTime.Days == 1 ? "day" : "days")" />

                <NumericEdit ShowStepButtons="false" Size="@Theme.Size" TValue="int?" Min="0" Max="23" Value="Task.DesiredTime.Hours" ValueChanged="SetDesiredIntervalHours" />
                <TextEdit Size="@Theme.Size" ReadOnly="true" Text="@(Task.DesiredTime.Hours == 1 ? "hour" : "hours")" />
            </div>

            @if (Task.IsElapsedOverDesired)
            {
                <div class="font-weight-bold">@( $"Desired interval is overdue by: {ToReadableString(Task.ElapsedTime - Task.DesiredTime)} ( {(Task.ElapsedToDesiredRatio - 100).ToString("N0")} % )" )</div>
            }
        </p>

        @foreach (DateTime time in Task.TimeList)
        {
            @if (editTime && SelectedTime == time.Ticks)
            {
                <div class="input-group flex-nowrap mb-1">
                    <DateEdit TValue="DateTime" Size="@Theme.Size" Date="@EditTime" DateChanged="@((dateTime) => { EditTime = dateTime.Date + EditTime.TimeOfDay; })" />
                    <TimeEdit TValue="TimeSpan" Size="@Theme.Size" Time="@EditTime.TimeOfDay" TimeChanged="@((timeSpan) => { EditTime = EditTime.Date + timeSpan; })" />
                    <div class="input-group-append">
                        <Button Color="Color.Primary" Outline="true" Size="@Theme.Size" @onclick="@(async () => await SaveTime(time))"><span class="fa fa-fw fa-save"></span></Button>
                        <Button Color="Color.Primary" Outline="true" Size="@Theme.Size" @onclick="@(() => { SelectedTime = 0; editTime = false; })"><span class="fa fa-fw fa-times"></span></Button>
                    </div>
                </div>
            }
            else
            {
                <div class="input-group flex-nowrap mb-1 d-flex">
                    <TextEdit Size="@Theme.Size" ReadOnly="true" Text="@(ToReadableString(DateTime.Now - time) + " ago")" />

                    <div class="input-group-append">
                        <Button Color="Color.Primary" Outline="true" Size="@Theme.Size" @onclick="@(() => { SelectedTime = time.Ticks; EditTime = time; editTime = true; })"><span class="fa fa-fw fa-edit"></span></Button>
                        <Button Color="Color.Primary" Outline="true" Size="@Theme.Size" @onclick="@(async () => await DeleteTime(time))"><span class="fas fa-fw fa-trash-alt"></span></Button>
                    </div>
                </div>
            }
        }
    }
</div>
