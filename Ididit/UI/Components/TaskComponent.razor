<Card Border=Border.Is0.OnEnd.Is0.OnStart.Is1.OnTop.Is1.OnBottom.RoundedZero Class="mx-n1">
<CardBody Background=Background.Light Padding=Padding.Is1>

    <Div Flex=Flex.NoWrap.AlignItems.Start>
        <Div Display=Display.Flex Flex=Flex.Grow.Is1 Border=Border.Is0 Margin=Margin.Is0 Padding=Padding.Is0 @onclick="ToggleTask">
            <Div>@Task.Name.Substring(2)</Div>
            <Div Margin=Margin.IsAuto.FromStart.Is1.FromEnd>@(Task.TimeList.Count > 0 ? ToHighestValueString(Task.ElapsedTime) + " ago" : "Never")</Div>
            @if (Task.DesiredInterval > 0) @* Settings.ShowRatio *@
            {
                @if (Task.ElapsedToDesiredRatio >= 100)
                {
                    <Div Margin=Margin.Is1.OnX TextWeight=TextWeight.Bold TextColor=TextColor.Danger>( @Task.ElapsedToDesiredRatio.ToString("N0") % )</Div>
                }
                else if (Task.ElapsedToDesiredRatio >= 80)
                {
                    <Div Margin=Margin.Is1.OnX TextWeight=TextWeight.Bold TextColor=TextColor.Warning>( @Task.ElapsedToDesiredRatio.ToString("N0") % )</Div>
                }
                else if (Task.TimeList.Any())
                {
                    <Div Margin=Margin.Is1.OnX TextWeight=TextWeight.Bold TextColor=TextColor.Info>( @Task.ElapsedToDesiredRatio.ToString("N0") % )</Div>
                }
                else
                {
                    <Div Margin=Margin.Is1.OnX><Icon Name="IconName.Exclamation" /></Div>
                }
            }
        </Div>
        @if (Task.DesiredInterval == 0)
        {
            <Button Color="Color.Primary" Outline="true" Size="@Theme.Size" Margin=Margin.Is0.Is1.OnX Padding=Padding.Is0.Is1.OnX Clicked="SetDesiredInterval"><Icon Name="IconName.SyncAlt" /></Button>
        }
        <Button Color="Color.Primary" Outline="true" Size="@Theme.Size" Margin=Margin.Is0 Padding=Padding.Is0.Is1.OnX Clicked="OnDone"><Icon Name="IconName.Check" /></Button>
    </Div>

    @if (Task == SelectedTask)
    {
        @if (!Task.TimeList.Any())
        {
            <div>
                @( "Created at: " + Task.CreatedAt )
            </div>
        }

        @if (Task.AverageInterval > 0)
        {
            <div>
                @( "Average interval: " + ToReadableString(Task.AverageTime) )

                @if (Task.IsElapsedOverAverage)
                {
                    <Div TextWeight=TextWeight.Bold>@( $"Average interval is overdue by: {ToReadableString(Task.ElapsedTime - Task.AverageTime)} ( {(Task.ElapsedToAverageRatio - 100).ToString("N0")} % )" )</Div>
                }
            </div>
        }

        @if (Task.DesiredInterval > 0)
        {
            <div>
                @( "Desired interval:" )

                <Addons Flex=Flex.NoWrap Margin=Margin.Is1.OnY>
                    <NumericEdit ShowStepButtons="false" Size="@Theme.Size" TValue="int?" Min="0" Max="9000" Value="Task.DesiredTime.Days" ValueChanged="SetDesiredIntervalDays" />
                    <TextEdit Size="@Theme.Size" ReadOnly="true" Text="@(Task.DesiredTime.Days == 1 ? "day" : "days")" />

                    <NumericEdit ShowStepButtons="false" Size="@Theme.Size" TValue="int?" Min="0" Max="23" Value="Task.DesiredTime.Hours" ValueChanged="SetDesiredIntervalHours" />
                    <TextEdit Size="@Theme.Size" ReadOnly="true" Text="@(Task.DesiredTime.Hours == 1 ? "hour" : "hours")" />

                    <Addon AddonType="AddonType.End">
                        <Button Color="Color.Primary" Outline="true" Size="@Theme.Size" @onclick=ClearDesiredInterval><Icon Name="IconName.Times" /></Button>
                    </Addon>
                </Addons>

                @if (Task.IsElapsedOverDesired)
                {
                    <Div TextWeight=TextWeight.Bold>@( $"Desired interval is overdue by: {ToReadableString(Task.ElapsedTime - Task.DesiredTime)} ( {(Task.ElapsedToDesiredRatio - 100).ToString("N0")} % )" )</Div>
                }
            </div>
        }

        @if (Task.TimeList.Any())
        {
            <Button Color="Color.Primary" Block=false Outline="true" Size="@Theme.Size" Margin=Margin.Is1.FromEnd Clicked="ToggleShowTime"><Icon Name="IconName.History" /></Button>

            <span>@(ToReadableString(DateTime.Now - Task.TimeList.Last()) + " ago")</span>
        }

        @if (showTime)
        {
            @foreach (DateTime time in Task.TimeList)
            {
                @if (editTime && SelectedTime == time.Ticks)
                {
                    <Addons Flex=Flex.NoWrap Margin=Margin.Is1.FromTop>
                        <DateEdit TValue="DateTime" Size="@Theme.Size" Date="@EditTime" DateChanged="@((dateTime) => { EditTime = dateTime.Date + EditTime.TimeOfDay; })" />
                        <TimeEdit TValue="TimeSpan" Size="@Theme.Size" Time="@EditTime.TimeOfDay" TimeChanged="@((timeSpan) => { EditTime = EditTime.Date + timeSpan; })" />
                        <Addon AddonType="AddonType.End">
                            <Button Color="Color.Primary" Outline="true" Size="@Theme.Size" @onclick="@(async () => await SaveTime(time))"><Icon Name="IconName.Save" /></Button>
                            <Button Color="Color.Primary" Outline="true" Size="@Theme.Size" @onclick="@(() => { SelectedTime = 0; editTime = false; })"><Icon Name="IconName.Times" /></Button>
                        </Addon>
                    </Addons>
                }
                else
                {
                    <Addons Flex=Flex.NoWrap Margin=Margin.Is1.FromTop Display=Display.Flex>
                        <TextEdit Size="@Theme.Size" ReadOnly="true" Text="@(ToReadableString(DateTime.Now - time) + " ago")" />

                        <Addon AddonType="AddonType.End">
                            <Button Color="Color.Primary" Outline="true" Size="@Theme.Size" @onclick="@(() => { SelectedTime = time.Ticks; EditTime = time; editTime = true; })"><Icon Name="IconName.Edit" /></Button>
                            <Button Color="Color.Primary" Outline="true" Size="@Theme.Size" @onclick="@(async () => await DeleteTime(time))"><Icon Name="IconName.Delete" /></Button>
                        </Addon>
                    </Addons>
                }
            }
        }
    }
</CardBody>
</Card>
