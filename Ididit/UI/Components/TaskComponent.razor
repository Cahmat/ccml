@using Ididit.Data.Models

<Card Border=Border.Is0.OnEnd.Is0.OnStart.Is1.OnTop.Is1.OnBottom.RoundedZero Class="mx-n1">
    <CardBody Background=Background.Light Padding=Padding.Is1>

    <Div Flex=Flex.NoWrap.AlignItems.Start>
        <Div Display=Display.Flex Flex=Flex.Grow.Is1 Border=Border.Is0 Margin=Margin.Is0 Padding=Padding.Is0 @onclick="ToggleTask">
            <Div Flex=Flex.Grow.Is1>@Task.Name</Div>
            @if (Task.IsRepeating)
            {
                <Div>@(Task.IsDoneAtLeastOnce ? ToHighestValueString(Task.ElapsedTime) + " ago" : "Never")</Div>

                @if (Task.ElapsedToDesiredRatio >= 100)
                {
                    <Div Margin=Margin.Is1.OnX TextWeight=TextWeight.Bold TextColor=TextColor.Danger>( @Task.ElapsedToDesiredRatio.ToString("N0") % )</Div>
                }
                else if (Task.ElapsedToDesiredRatio >= 80)
                {
                    <Div Margin=Margin.Is1.OnX TextWeight=TextWeight.Bold TextColor=TextColor.Warning>( @Task.ElapsedToDesiredRatio.ToString("N0") % )</Div>
                }
                else
                {
                    <Div Margin=Margin.Is1.OnX TextWeight=TextWeight.Bold TextColor=TextColor.Info>( @Task.ElapsedToDesiredRatio.ToString("N0") % )</Div>
                }
            }
            @switch(Task.Priority)
            {
                case Priority.VeryLow:
                    <i class="fas fa-fw my-auto fa-angle-double-down"></i>
                    break;
                case Priority.Low:
                    <i class="fas fa-fw my-auto fa-angle-down"></i>
                    break;
                case Priority.Medium:
                    <i class="fas fa-fw my-auto fa-minus"></i>
                    break;
                case Priority.High:
                    <i class="fas fa-fw my-auto fa-angle-up"></i>
                    break;
                case Priority.VeryHigh:
                    <i class="fas fa-fw my-auto fa-angle-double-up"></i>
                    break;
            }
        </Div>
        @if (Task.IsTask)
        {
            <Button Color="Color.Primary" Outline="true" Size="Size" Margin=Margin.Is1.FromStart Padding=Padding.Is0.Is1.OnX Clicked="OnDone"><Icon Name="IconName.Check" /></Button>
        }
    </Div>

    @if (Task == SelectedTask)
    {
        <Inline>
            <Span Margin=Margin.Is1.FromEnd>Task:</Span>
            <Select TValue="TaskKind" Size=Size.Small SelectedValue="Task.TaskKind" SelectedValueChanged="OnTaskKindChanged">
                <SelectItem Value="TaskKind.Note">Note</SelectItem>
                <SelectItem Value="TaskKind.Task">Task</SelectItem>
                <SelectItem Value="TaskKind.RepeatingTask">Repeating task</SelectItem>
            </Select>
        </Inline>

        <Inline>
            <Span Margin=Margin.Is1.FromEnd>Priority:</Span>
            <Select Size=Size.Small TValue="Priority" SelectedValue="Task.Priority" SelectedValueChanged="PriorityChanged">
                <SelectItem Value="Priority.None">None</SelectItem>
                <SelectItem Value="Priority.VeryLow">Very low</SelectItem>
                <SelectItem Value="Priority.Low">Low</SelectItem>
                <SelectItem Value="Priority.Medium">Medium</SelectItem>
                <SelectItem Value="Priority.High">High</SelectItem>
                <SelectItem Value="Priority.VeryHigh">Very high</SelectItem>
            </Select>
        </Inline>

        @if (!Task.IsDoneAtLeastOnce)
        {
            <div>
                @( "Created at: " + Task.CreatedAt )
            </div>
        }

        @if (Task.AverageInterval > 0)
        {
            <div>
                @( "Average interval: " + ToReadableString(Task.AverageTime) )

                @if (Task.IsElapsedOverAverage)
                {
                    <Div TextWeight=TextWeight.Bold>@( $"Average interval is overdue by: {ToReadableString(Task.ElapsedTime - Task.AverageTime)} ( {(Task.ElapsedToAverageRatio - 100).ToString("N0")} % )" )</Div>
                }
            </div>
        }

        @if (Task.IsRepeating)
        {
            <div>
                @( "Desired interval:" )

                <Addons Flex=Flex.NoWrap Margin=Margin.Is1.OnY>
                    <NumericEdit ShowStepButtons="false" Size="Size" TValue="int?" Min="0" Max="9000" Value="Task.DesiredTime.Days" ValueChanged="SetDesiredIntervalDays" />
                    <TextEdit Size="Size" ReadOnly="true" Text="@(Task.DesiredTime.Days == 1 ? "day" : "days")" />

                    <NumericEdit ShowStepButtons="false" Size="Size" TValue="int?" Min="0" Max="23" Value="Task.DesiredTime.Hours" ValueChanged="SetDesiredIntervalHours" />
                    <TextEdit Size="Size" ReadOnly="true" Text="@(Task.DesiredTime.Hours == 1 ? "hour" : "hours")" />

                    <Addon AddonType="AddonType.End">
                        <Button Color="Color.Primary" Outline="true" Size="Size" @onclick=ClearDesiredInterval><Icon Name="IconName.Times" /></Button>
                    </Addon>
                </Addons>

                @if (Task.IsElapsedOverDesired)
                {
                    <Div TextWeight=TextWeight.Bold>@( $"Desired interval is overdue by: {ToReadableString(Task.ElapsedTime - Task.DesiredTime)} ( {(Task.ElapsedToDesiredRatio - 100).ToString("N0")} % )" )</Div>
                }
            </div>
        }

        @if (Task.IsDoneAtLeastOnce)
        {
            <Button Color="Color.Primary" Block=false Outline="true" Size="Size" Margin=Margin.Is1.FromEnd Clicked="ToggleShowTime"><Icon Name="IconName.History" />Show history</Button>
        }

        @if (_showTime)
        {
            <Span>@($" I did it: {Task.TimeList.Count}x")</Span>

            @foreach (DateTime time in Task.TimeList.OrderByDescending(t => t))
            {
                @if (_editTime && _selectedTime == time.Ticks)
                {
                    <Addons Flex=Flex.NoWrap Margin=Margin.Is1.FromTop>
                        <DateEdit TValue="DateTime" Size="Size" Date="@_taskTime" DateChanged="DateChanged" />
                        <TimeEdit TValue="TimeSpan" Size="Size" Time="@_taskTime.TimeOfDay" TimeChanged="TimeChanged" />
                        <Addon AddonType="AddonType.End">
                            <Button Color="Color.Primary" Outline="true" Size="Size" @onclick="@(async () => await SaveTime(time))"><Icon Name="IconName.Save" /></Button>
                            <Button Color="Color.Primary" Outline="true" Size="Size" @onclick="@(() => CancelEditTime())"><Icon Name="IconName.Times" /></Button>
                        </Addon>
                    </Addons>
                }
                else
                {
                    <Addons Flex=Flex.NoWrap Margin=Margin.Is1.FromTop Display=Display.Flex>
                        <TextEdit Size="Size" ReadOnly="true" Text="@(ToReadableString(DateTime.Now - time) + " ago")" />

                        <Addon AddonType="AddonType.End">
                            <Button Color="Color.Primary" Outline="true" Size="Size" @onclick="@(() => EditTime(time))"><Icon Name="IconName.Edit" /></Button>
                            <Button Color="Color.Primary" Outline="true" Size="Size" @onclick="@(async () => await DeleteTime(time))"><Icon Name="IconName.Delete" /></Button>
                        </Addon>
                    </Addons>
                }
            }
        }
    }

</CardBody>
</Card>
